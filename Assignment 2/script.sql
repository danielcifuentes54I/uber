/* 1. Vista llamada MEDIOS_PAGO_CLIENTES */
CREATE OR REPLACE VIEW MEDIOS_PAGO_CLIENTES AS
SELECT P.ID_PERSON AS CLIENTE_ID, P.FIRST_NAME || ' ' || P.LAST_NAME AS NOMBRE_CLIENTE, 
PM.ID_PAYMENT AS MEDIO_PAGO_ID, PM.DESCRIPTIONS AS TIPO, PP.DESCRIPTIONS AS DETALLES_MEDIO_PAGO,
(CASE WHEN PP.BUSINESS = 'true' THEN 'VERDADERO' ELSE 'FALSO' END) AS EMPRESARIAL,
(CASE WHEN PP.BUSINESS = 'false' THEN NULL ELSE PP.NAME_BUSINESS END) AS NOMBRE_EMPRESA
FROM PEOPLE P
INNER JOIN PAYMENT_PEOPLE PP ON P.ID_PERSON = PP.ID_PERSON
INNER JOIN PAYMENT_METHODS PM ON PP.ID_PAYMENT = PM.ID_PAYMENT;

/* 2. Vista llamada VIAJES_CLIENTES*/     
CREATE OR REPLACE VIEW VIAJES_CLIENTES AS
SELECT T.DATE_TRAVEL AS FECHA_VIAJE, P.FIRST_NAME || ' ' || P.LAST_NAME AS NOMBRE_CONDUCTOR, 
V.LICENSE_PLATE AS PLACA, PU.FIRST_NAME || ' ' || PU.LAST_NAME AS NOMBRE_CLIENTE, TD.TOTAL AS, 
(CASE WHEN T.TYPE_RATE = 'Dinamica' THEN 'VERDADERO' ELSE 'FALSO' END) AS TARIFA_DINAMICA,
V.VEHICLE_TYPE AS TIPO_SERVICIO, C.NAME_CITY AS CIUDAD_VIAJE
FROM TRAVELS T
INNER JOIN TRAVEL_DETAIL TD ON T.ID_TRAVEL = TD.ID_TRAVEL
INNER JOIN PEOPLE PU ON TD.ID_PERSON = PU.ID_PERSON
INNER JOIN VEHICLES_DRIVERS VD ON T.ID_VEHICLE_DRIVER = VD.ID_VEHICLE_DRIVER
INNER JOIN DRIVERS D ON D.ID_DRIVER = VD.ID_DRIVER
INNER JOIN VEHICLES V ON V.ID_VEHICLE = VD.ID_VEHICLE
INNER JOIN PEOPLE P ON P.ID_PERSON = D.ID_PERSON
INNER JOIN CITIES C ON P.ID_CITY = C.ID_CITY
ORDER BY (T.DATE_TRAVEL); 

/* 3.  plan de ejecución de la vista VIAJES_CLIENTES*/   
EXPLAIN PLAN FOR SELECT * FROM VIAJES_CLIENTES;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

CREATE UNIQUE INDEX CITY_NAME ON CITIES(NAME_CITY);
CREATE UNIQUE INDEX TAVEL_IDS ON TRAVEL_DETAIL(ID_TRAVEL_DETAIL,ID_TRAVEL);
CREATE UNIQUE INDEX TRAVEL_DATEID ON TRAVELS(ID_TRAVEL,DATE_TRAVEL);
CREATE UNIQUE INDEX VEHICLES_DRIVERS ON VEHICLES_DRIVERS(ID_VEHICLE_DRIVER,ID_VEHICLE,ID_DRIVER);

EXPLAIN PLAN FOR SELECT * FROM VIAJES_CLIENTES;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

/* 4.  implementar el valor de la tarifa por cada kilómetro recorrido y el valor de
la tarifa por minuto transcurrido de acuerdo a cada ciudad.
Se ralizo la creacion de estos campos en la tabla cuidades como se evidencia en el scrip DataBase_Insert
o a continuación:
CREATE TABLE CITIES
(
  ID_CITY INT primary key,
  NAME_CITY VARCHAR(255) NOT NULL,
  ID_COUNTRY INT NOT NULL,
  TARIFA_KILOMETRO NUMERIC(15,6) NOT NULL,
  TARIFA_MINUTOS NUMERIC(15,6) NOT NULL,
  TARIFA_BASE NUMERIC(15,6) NOT NULL,
  CONSTRAINT FK_CITY_COUNTRY  FOREIGN KEY (ID_COUNTRY) REFERENCES COUNTRIES(ID_COUNTRY)
);
*/   
  
/* 5) FUNCIÓN VALOR_DISTANCIA*/
CREATE OR REPLACE FUNCTION VALOR_DISTANCIA (P_KILOMETROS IN TRAVELS.DISTANCE%TYPE , P_CIUDAD IN CITIES.NAME_CITY%TYPE)
    RETURN NUMBER AS 
    --Zona declarativa
    VALOR_DISTANCIA  NUMBER := 0;
    V_TARIFA_KILOMETRO CITIES.TARIFA_KILOMETRO%TYPE;
    EXC_CIUDAD_NO_VALIDA EXCEPTION;
    EXC_KILOMETRO_NO_VALIDO EXCEPTION;
    
    BEGIN
        --Se validan la ciudad ingresada
        IF P_KILOMETROS < 0 THEN
            RAISE EXC_KILOMETRO_NO_VALIDO;
        END IF;
    
        --Se validan la ciudad ingresada
        BEGIN
            SELECT TARIFA_KILOMETRO INTO V_TARIFA_KILOMETRO
            FROM CITIES WHERE NAME_CITY = P_CIUDAD;

        EXCEPTION
            WHEN OTHERS THEN
                RAISE EXC_CIUDAD_NO_VALIDA;
        END;
        
        VALOR_DISTANCIA := V_TARIFA_KILOMETRO*P_KILOMETROS;
        
        RETURN VALOR_DISTANCIA;
    EXCEPTION
        --Se capturan las excepciones
        WHEN EXC_CIUDAD_NO_VALIDA THEN 
            RAISE_APPLICATION_ERROR(-20000,'CIUDAD NO VALIDA');
        WHEN EXC_KILOMETRO_NO_VALIDO THEN 
            RAISE_APPLICATION_ERROR(-20001,'KILOMETRO NO VALIDO');
    END;
/

/* 6) FUNCIÓN VALOR_TIEMPO*/
CREATE OR REPLACE FUNCTION VALOR_TIEMPO (P_MINUTOS IN TRAVELS.TIME_TRAVEL%TYPE, P_CIUDAD IN CITIES.NAME_CITY%TYPE)
    RETURN NUMBER AS 
    --Zona declarativa
    VALOR_TIEMPO  NUMBER := 0;
    V_TARIFA_MINUTOS CITIES.TARIFA_MINUTOS%TYPE;
    EXC_CIUDAD_NO_VALIDA EXCEPTION;
    EXC_MINUTO_NO_VALIDO EXCEPTION;
    
    BEGIN
        
        --Se validan los minutos ingresados
        IF P_MINUTOS < 0 THEN
            RAISE EXC_MINUTO_NO_VALIDO;
        END IF;
    
        --Se validan la ciudad ingresada
        BEGIN
            SELECT TARIFA_MINUTOS INTO V_TARIFA_MINUTOS
            FROM CITIES WHERE NAME_CITY = P_CIUDAD;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE EXC_CIUDAD_NO_VALIDA;
        END;
        
        VALOR_TIEMPO := V_TARIFA_MINUTOS*P_MINUTOS;
        
        RETURN VALOR_TIEMPO;
    EXCEPTION
        --Se capturan las excepciones
        WHEN EXC_CIUDAD_NO_VALIDA THEN 
            RAISE_APPLICATION_ERROR(-20000,'CIUDAD NO VALIDA');
        WHEN EXC_MINUTO_NO_VALIDO THEN 
            RAISE_APPLICATION_ERROR(-20002,'MINUTO NO VALIDO');
    END;
    /

/*7 Procedimiento Calcular Tarifa*/
CREATE OR REPLACE PROCEDURE CALCULAR_TARIFA (P_ID_VIAJE in TRAVELS.ID_TRAVEL%TYPE) AS
    V_ESTADO TRAVELS.STATUS%TYPE;
    V_TIEMPO TRAVELS.TIME_TRAVEL%TYPE;
    V_KILOMETROS TRAVELS.DISTANCE%TYPE;
    V_TARIFA_BASE CITIES.TARIFA_BASE%TYPE;
    V_NOMBRE_CIUDAD CITIES.NAME_CITY%TYPE;
    V_VALOR_DISTANCIA NUMBER;
    V_VALOR_TIEMPO NUMBER;
    V_VALOR_DETALLES NUMBER;
    V_VALOR_TOTAL NUMBER;
BEGIN

    --SE UTILIZA UN CURSOR EXPLICITO PARA TRAER CAMPOS NECESARIOS
    SELECT STATUS, DISTANCE, TIME_TRAVEL INTO V_ESTADO, V_KILOMETROS, V_TIEMPO
    FROM TRAVELS WHERE ID_TRAVEL = P_ID_VIAJE;    
    
    --SI EL VIAJE NO SE HA REALIZADO SE ACTUALIZA EL TOTAL EN CERO (0)
    IF V_ESTADO != 'REALIZADO' THEN
        DBMS_OUTPUT.PUT_LINE('NO SE HA REALIZADO EL VIAJE, El ESTADO ES: ' || V_ESTADO);
        UPDATE SETTLEMENTS SET TOTAL = 0 WHERE ID_TRAVEL = P_ID_VIAJE;
        UPDATE TRAVEL_DETAIL SET TOTAL = 0 WHERE ID_TRAVEL = P_ID_VIAJE;
    ELSE 
        --SE OBTIENE EL VALOR BASE Y EL NOMBRE DE LA CIUDAD
        SELECT C.TARIFA_BASE, C.NAME_CITY  INTO V_TARIFA_BASE, V_NOMBRE_CIUDAD
        FROM CITIES C
        INNER JOIN PEOPLE P ON P.ID_CITY = C.ID_CITY
        INNER JOIN TRAVEL_DETAIL TD ON TD.ID_PERSON = P.ID_PERSON
        INNER JOIN TRAVELS T ON T.ID_TRAVEL = TD.ID_TRAVEL
        WHERE T.ID_TRAVEL = P_ID_VIAJE;
        DBMS_OUTPUT.PUT_LINE('VALOR BASE: ' || V_TARIFA_BASE);
        
        --SE INVOCA LA FUNCION VALOR_DISTANCIA
        V_VALOR_DISTANCIA := VALOR_DISTANCIA(V_KILOMETROS, V_NOMBRE_CIUDAD);
        DBMS_OUTPUT.PUT_LINE('VALOR DISTANCIA: ' || V_VALOR_DISTANCIA);

        --SE INVOCA LA FUNCION VALOR_TIEMPO
        V_VALOR_TIEMPO := VALOR_TIEMPO(V_TIEMPO, V_NOMBRE_CIUDAD);
        DBMS_OUTPUT.PUT_LINE('VALOR TIEMPO: ' || V_VALOR_TIEMPO);
        
        --SE SUMAN LOS DETALLES DE LOS VIAJES
        SELECT COMMISSIONS INTO V_VALOR_DETALLES
        FROM TRAVEL_DETAIL WHERE ID_TRAVEL = P_ID_VIAJE;
        DBMS_OUTPUT.PUT_LINE('VALOR DETALLES: ' || V_VALOR_DETALLES);
        
        --SE TOTALIZA
        V_VALOR_TOTAL := V_TARIFA_BASE + V_VALOR_DISTANCIA + V_VALOR_TIEMPO + V_VALOR_DETALLES;
        DBMS_OUTPUT.PUT_LINE('VALOR TOTAL: ' || V_VALOR_TOTAL);
        
        --SE ACTUALIZA EL REGISTRO DEL VIAJE 
        UPDATE SETTLEMENTS SET TOTAL = V_VALOR_TOTAL WHERE ID_TRAVEL = P_ID_VIAJE;
        UPDATE TRAVEL_DETAIL SET TOTAL = V_VALOR_TOTAL WHERE ID_TRAVEL = P_ID_VIAJE;

    
    END IF;
    
EXCEPTION
    --SE CONTROLA CUALQUIER TIPO DE EXCEPCIÓN ACTUALIZANDO EL VALOR A CERO (0)
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('HA OCURRIDO UNA EXCEPCIÓN');
        UPDATE SETTLEMENTS SET TOTAL = 0 WHERE ID_TRAVEL = P_ID_VIAJE;
        UPDATE TRAVEL_DETAIL SET TOTAL = 0 WHERE ID_TRAVEL = P_ID_VIAJE;
END;
/

